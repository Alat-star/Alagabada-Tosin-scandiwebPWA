{"version":3,"file":"static/js/977.15b81333.chunk.js","mappings":"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","sources":["pages/Products/buckets/productAttribute.js","pages/Products/pdp.js","queries/pdpQuery.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { addCart } from \"../../../slices/cartSlice\";\nimport \"./productAttribute.css\";\nimport { connect } from \"react-redux\";\n\nclass ProductAttribute extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeText: this.props.initial,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ activeText: this.props.initial });\n    }, 1000);\n  }\n  handleClick = (index) => {\n    const textindex = index;\n\n    this.setState({ activeText: textindex });\n\n    this.props.dispatch(addCart({ textindex }));\n  };\n  render() {\n    if (this.props.type === \"text\") {\n      return (\n        <>\n          <span>{this.props.name}:</span>\n          <div className=\"container\">\n            {this.props.item.map(({ value }, index) => {\n              return (\n                <>\n                  <div key={index}>\n                    <div\n                      className={`text_box ${\n                        this.state.activeText === index ? \"active_text\" : \"\"\n                      }`}\n                      onClick={() => this.handleClick(index)}\n                    >\n                      {value}\n                    </div>\n                  </div>\n                </>\n              );\n            })}\n          </div>\n        </>\n      );\n    }\n    if (this.props.type === \"swatch\")\n      return (\n        <>\n          <span>{this.props.name}:</span>\n          <div className=\"container\">\n            {this.props.item.map(({ value }, index) => {\n              return (\n                <>\n                  <div\n                    className=\"swatch_box\"\n                    style={{\n                      background: value,\n\n                      border:\n                        value === \"white\" || value === \"#FFFFFF\"\n                          ? `${1}px solid black`\n                          : \"none\",\n                      outlineStyle: \"solid\",\n                      outlineColor:\n                        this.state.activeText === index ? \"#5ECE7B\" : \"#fff\",\n                      outlineOffset: `${2}px`,\n                      outlineWidth: `${2}px`,\n                    }}\n                    key={index}\n                    onClick={() => this.handleClick(index)}\n                  ></div>\n                </>\n              );\n            })}\n          </div>\n        </>\n      );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  atttr: state.cart.attrid,\n});\n\nexport default connect(mapStateToProps)(ProductAttribute);\n","import React, { Component } from \"react\";\nimport \"./pdp.css\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport ProductAttribute from \"./buckets/productAttribute\";\nimport { addCart } from \"../../slices/cartSlice\";\nimport getSvg from \"../../svg/getSvg\";\n\nclass PDP extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imgsrc: this.props.data.product?.gallery[0],\n      imgload: false,\n      toast: false,\n    };\n  }\n  componentDidMount() {\n    // here you have the id to query\n    const id = this.props.match.params.productId;\n    this.props.data.refetch({ pdpid: id });\n    setTimeout(() => {\n      this.setState({ imgsrc: this.props.data.product.gallery[0] });\n    }, 1000);\n  }\n  handleClick(id, brand, image, attributes, prices) {\n    const textindex = this.props.attrop;\n    this.setState({ toast: true });\n    setTimeout(() => {\n      this.setState({ toast: false });\n    }, 3000);\n    this.props.dispatch(\n      addCart({ id, brand, image, attributes, textindex, prices })\n    );\n  }\n  unescapeHTML(html) {\n    var escapeEl = document.createElement(\"p\");\n    escapeEl.innerHTML = html;\n    return escapeEl.textContent;\n  }\n  render() {\n    const {\n      data: { product, loading },\n    } = this.props;\n\n    if (loading) {\n      return <img alt=\"suspense_loader\" src={getSvg.loader} />;\n    } else {\n      let pdpamount = product.prices.filter(\n        (price) => price.currency.symbol === this.props.currency.symbol\n      )[0];\n\n      return (\n        <>\n          <div className=\"pdp_container\">\n            {this.state.toast ? (\n              <div className=\"toast\">Item added to cart!</div>\n            ) : null}\n            <div className=\"image_section\">\n              <div className=\"image_column\">\n                {product.gallery.map((src, index) => {\n                  return (\n                    <img\n                      src={src}\n                      key={index}\n                      alt=\"more_images\"\n                      onClick={() => this.setState({ imgsrc: src })}\n                      className=\"img_col\"\n                    />\n                  );\n                })}\n              </div>\n\n              <div>\n                {/*toast*/}\n                {this.state.imgload ? null : (\n                  <img src={getSvg.loader} alt=\"\" className=\"loader_img\" />\n                )}\n                <img\n                  src={this.state.imgsrc}\n                  alt=\"\"\n                  className=\"pdp_image\"\n                  onLoad={() => this.setState({ imgload: true })}\n                  style={{ opacity: product.inStock ? 1 : 0.5 }}\n                />\n                {!product.inStock && (\n                  <h2 className=\"outof_stock\">OUT OF STOCK</h2>\n                )}\n              </div>\n            </div>\n            <div className=\"attribute_section\">\n              <h1 className=\"product_name\">{product.name}</h1>\n              <h1 className=\"product_brand\">{product.brand}</h1>\n              {product.attributes.map(({ type, name, items }, index) => {\n                return (\n                  <>\n                    <div className=\"pdp_innerCon\" key={index}>\n                      <span className=\"pdp_name\">{name}:</span>\n                      <div style={{ marginTop: `${1}rem` }}>\n                        <ProductAttribute\n                          name={name}\n                          item={items}\n                          type={type}\n                          initial={this.props.attrop}\n                        />\n                      </div>\n                    </div>\n                  </>\n                );\n              })}\n              <div className=\"pdp_down\">\n                <span className=\"pdp_price\">Price:</span>\n                <span className=\"pdp_amount\">\n                  {this.props.currency.symbol}\n                  {pdpamount.amount}\n                </span>\n              </div>\n              <button\n                className=\"pdp_button\"\n                style={{\n                  pointerEvents: product.inStock ? \"all\" : \"none\",\n                }}\n                onClick={() =>\n                  this.handleClick(\n                    product.name,\n                    product.brand,\n                    product.gallery,\n                    product.attributes,\n                    product.prices\n                  )\n                }\n              >\n                Add to cart!\n              </button>\n\n              {this.unescapeHTML(product.description)}\n            </div>\n          </div>\n        </>\n      );\n    }\n  }\n}\nconst mapStateToProps = (state) => ({\n  pdpinfo: state.cart.pdpinfo,\n  attrop: state.cart.attrid,\n  currency: state.currency.activeCurrency,\n});\n\nexport default connect(mapStateToProps)(withRouter(PDP));\n","import { graphql } from \"@apollo/client/react/hoc\";\nimport { gql } from \"@apollo/client\";\nimport PDP from \"../pages/Products/pdp\";\n\nexport default graphql(\n  gql`\n    query ($pdpid: String!) {\n      product(id: $pdpid) {\n        id\n        gallery\n        name\n        brand\n        inStock\n        description\n        prices {\n          currency {\n            symbol\n            label\n          }\n          amount\n        }\n        attributes {\n          id\n          name\n          type\n          items {\n            displayValue\n            value\n            id\n          }\n        }\n      }\n    }\n  `,\n  {\n    options: () => ({\n      variables: { pdpid: \"huarache-x-stussy-le\" },\n    }),\n  }\n)(PDP);\n"],"names":["ProductAttribute","props","handleClick","index","textindex","setState","activeText","dispatch","addCart","state","initial","bind","setTimeout","this","type","name","className","item","map","value","onClick","style","background","border","outlineStyle","outlineColor","outlineOffset","outlineWidth","Component","connect","atttr","cart","attrid","PDP","imgsrc","data","product","gallery","imgload","toast","id","match","params","productId","refetch","pdpid","brand","image","attributes","prices","attrop","html","escapeEl","document","createElement","innerHTML","textContent","loading","alt","src","getSvg","pdpamount","filter","price","currency","symbol","onLoad","opacity","inStock","items","marginTop","amount","pointerEvents","unescapeHTML","description","pdpinfo","activeCurrency","withRouter","graphql","gql","options","variables"],"sourceRoot":""}